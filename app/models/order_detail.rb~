class OrderDetail < ActiveRecord::Base
  belongs_to :order
  belongs_to :product
  attr_accessible :order_id, :note, :quantity, :product_id, :price
  validates :product_id, :presence=>true
  
    def self.search(options = {:date_start => nil, :date_end => nil, :product_id => nil, :order_type => nil, :product_category => nil, :ob_product_name => nil, :ob_product_category => nil, :ob_amount => nil})
  
    where_queries = Array.new
    where_params = Hash.new
    
    if !options[:date_start].blank? && !options[:date_end].blank?
      where_queries << "orders.date between :date_start and :date_end"
      where_params[:date_start] = options[:date_start]
      where_params[:date_end] = options[:date_end]
    elsif !options[:date_start].blank?
      where_queries << "orders.date >= :date_start"
      where_params[:date_start] = options[:date_start]
    elsif !options[:date_end].blank?
      where_queries << "orders.date <= :date_end"
      where_params[:date_end] = options[:date_end]    
    end
    
    unless options[:product_id].blank?
      where_queries << "order_details.product_id = :product_id"
      where_params[:product_id] = options[:product_id] 
    end
    
    unless options[:order_type].blank?
     where_queries << "orders.mode = :order_type"
     where_params[:order_type] = options[:order_type]
    end
    
    unless options[:product_category].blank?
      where_queries << "products.category = :product_category"
      where_params[:product_category] = options[:product_category] 
    end
    
    order_info = Array.new
    
    unless options[:ob_product_name].blank?
      if options[:ob_product_name] == "up"
        order_info << "products.name ASC"
      elsif options[:ob_product_name] == "down"
        order_info << "products.name ASC"
      end
    end
    
    unless options[:ob_product_category].blank?
      if options[:ob_product_category] == "up"
        order_info << "products.category ASC"
      elsif options[:ob_product_category] == "down"
        order_info << "products.category DESC"
      end
    end

    unless options[:ob_amount].blank?
      if options[:ob_amount] == "up"
        order_info << "order_details.quantity ASC"
      elsif options[:ob_amount] == "down"
        order_info << "order_details.quantity DESC"
      end
    end
    
    self.joins("join orders on order_details.order_id = orders.id join products on order_details.product_id = products.id").where(where_queries.join(" and "), where_params).order(order_info.join(","))
    
  end
end
